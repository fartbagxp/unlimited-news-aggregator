=Test Plan=

*Goal requirement*
  

Each test case will undergo whether it works under normal conditions (if the test is testable within the system) and whether it meets user requirement (for interface design).

*Schedule*

Dates{	         }System testing schedule

11/19/08	- Organize time to talk to different testers (explanation of system)

                - Deal with test case 1-6

11/20/08	- Deal with test case 7-12

11/21/08	- Extra testing: Allow testers to test the system and try to break the system 

Guidelines for testers
-	Included along with a tester’s manual
Basic testing strategy used
White box – Testing conducted near the end of each iteration by putting “tracers (output statements)”, everywhere in the code to see whether the news aggregator would output what it’s supposed to output at where it’s supposed to output.  Example: 1) Checking whether the table was updated with correct news articles
2) Checking whether the table would give out correct times and descriptions of headlines
3) Checking whether an album was made
Black box – testing functional requirements for completed used cases near the end of every iteration.  These tests were conducted by giving the news aggregator input and viewing if the output was correct.  
Example: 1) Getting all headlines in less than 10 seconds
    2) Getting each article in less than 3 seconds 
Positive Testing – Example: clicking on each button and making sure it does what it’s supposed to
Negative Testing – make sure all error cases are prompt the user to do something else.  
Example: 1) Clicking on search without entering anything in the textbox 
    - Error handle: prompt message to enter search keywords turns red
    2) Clicking on “Get Article” when no headlines are checked 
    - Error handle: prompt to check a message turns red
Unit Testing – testing each individual class by writing a new program main function and calling each class independently for correct input.  
Example: 1) Testing if GUI was creating what it’s supposed to 
                  2) Testing whether the AlbumView class is displaying a correct table
[Special note:  unit testing is integrated with white box testing and System Integration testing]
Integration Testing – testing whether components communicate with each other to solve something. 
Example: 1) Search function communicate with the table in the headline tab to    `	search for specific articles 
2) “Get Headlines” button is able to look into the RSS feed in the table and     update the table in the headlines tab with Headlines
Stress and Performance Testing – looking into the capacity of the system 
Example: 1) Testing by adding as many sources as possible and getting all the headlines from it.
System Integration Testing – integrated with White Box Testing and Unit Testing
User Acceptance Testing – testing done by users.  
Example: 1) We asked roommates to do this and told them to give us back feedback *currently in progress*
Resources:
	-  Internet Connection: Cable, T1 (RPI) 
-  Team-members: Yu Ning (Boris), Max Muthalathu, Hsin-Yen Liu (Tommy), 
-  Testers: Boris Ning, Alex Peach, Devon Ross, Max Muthalathu, Hsin-Yen Liu (Tommy)
-  Equipment (computer, processor, internet, OS):
	Boris: T60, Intel Core Duo T2500, T1, Windows Vista
	Alex:  T60, Intel Core Duo T2500, T1, Windows XP
	Devon: T60, Intel Core Duo T2500, T1, Windows XP
	Max: T43P, Intel Pentium M Processor 760, Cable/T1, Windows XP
	Tommy: Sony Vaio, VGN-CR, T1, Windows Vista (Chinese)
-  Time: 3 days
o	Any other information about the testing effort:
- Must have the Mozilla browser
- Must have Windows XP or better
- Must have XUL runner to run Mozilla in browser (otherwise it crashes)